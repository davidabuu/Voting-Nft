{
  "language": "Solidity",
  "sources": {
    "contracts/VotingContract.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.7;\r\n\r\nerror VotingContract__YouHaveVotedAlready();\r\nerror VotingContract__VotingIsOver();\r\ncontract VotingContract {\r\n    address private manager;\r\n    mapping(address => bool) presidentVote;\r\n    mapping(address => bool) vicePresidentVote;\r\n    mapping(address => bool) secretaryVote;\r\n    //Determine the voting App State\r\n     enum VotingState {\r\n    OPEN,\r\n    CLOSED\r\n  }\r\n  VotingState public s_votingState;\r\n     \r\n    constructor(){\r\n        manager = msg.sender;\r\n        s_votingState = VotingState.OPEN;\r\n    }\r\n\r\n    struct Candidates{\r\n        string s_fullName;\r\n        string s_department;\r\n        string s_matricNumber;\r\n        string image;\r\n        uint256 s_voteCount;\r\n        string s_role;\r\n    }\r\n     mapping (uint256 => Candidates) public users;\r\n    //Modifier\r\n    modifier onlyManager{\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n//Check the Vote Role Status\r\nfunction checkRoleStatus (string memory person, string memory role, string memory err) public pure {\r\n     require((keccak256(abi.encodePacked((person))) == keccak256(abi.encodePacked((role)))), err);\r\n}\r\n//Store the candidates in an array\r\n    Candidates [] public candidates;\r\n    function addCandidates(string memory fullName, string memory department, string memory matricNumber, string memory image, uint256 voteCount, string memory role ) public onlyManager{\r\n        Candidates memory newCandidate = Candidates(fullName, department, matricNumber, image, voteCount, role);\r\n        candidates.push(newCandidate);\r\n    }\r\n    function voteForPresident(uint256 index) public {\r\n         if(s_votingState == VotingState.CLOSED){\r\n             revert  VotingContract__VotingIsOver();\r\n         }else{\r\n               checkRoleStatus(candidates[index].s_role, \"President\", \"Wrong Category P\"); \r\n        if(presidentVote[msg.sender]){\r\n            revert VotingContract__YouHaveVotedAlready();\r\n        }else{\r\n         candidates[index].s_voteCount +=1;\r\n        presidentVote[msg.sender] = true;\r\n        }\r\n         }\r\n        \r\n       \r\n    }\r\n      function voteForVicePresident(uint256 index) public {\r\n         if(s_votingState == VotingState.CLOSED){\r\n             revert  VotingContract__VotingIsOver();\r\n         }else{\r\n        checkRoleStatus(candidates[index].s_role, \"Vice President\", \"Wrong Category Vp\"); \r\n        if(vicePresidentVote[msg.sender]){\r\n            revert VotingContract__YouHaveVotedAlready();\r\n        }else{\r\n         candidates[index].s_voteCount +=1;\r\n        vicePresidentVote[msg.sender] = true;\r\n        }\r\n         }\r\n        \r\n       \r\n    }\r\n     function voteForSecretary(uint256 index) public {\r\n         if(s_votingState == VotingState.CLOSED){\r\n             revert  VotingContract__VotingIsOver();\r\n         }else{\r\n               checkRoleStatus(candidates[index].s_role, \"Secretary\", \"Wrong Category S\"); \r\n        if(secretaryVote[msg.sender]){\r\n            revert VotingContract__YouHaveVotedAlready();\r\n        }else{\r\n         candidates[index].s_voteCount +=1;\r\n        secretaryVote[msg.sender] = true;\r\n        }\r\n         }  \r\n    }\r\n    //Get All Candidates\r\n    function getAllCandidate() public view returns (Candidates[] memory) {\r\n        return candidates;\r\n    }\r\n    //Stop Voting\r\n    function stopVoting () onlyManager public {\r\n        s_votingState = VotingState.CLOSED;\r\n    }\r\n    \r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}